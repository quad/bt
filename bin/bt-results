#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'bt'
require 'bt/yaml'
require 'json'

FORMATS = {
  'text' => proc do |pipelines|
    "".tap do |result|
      pipelines.map do |p|
        stage_list = p.stages.map do |stage|
          "#{stage.name}: #{stage.result}\n"
        end

        result << "Results (#{p.commit.sha}):\n\n"
        result << stage_list.join
      end
    end
  end,

  'json' => proc { |pipelines| pipelines.map(&:to_hash).to_json },

  'short' => proc { |pipelines| pipelines.map { |p| "#{p.commit.sha}: #{p.status}\n" }.join }
}

opts = Trollop::options do
  banner <<-EOS
Shows build results for head.

Usage:
\tbt-results [OPTIONS...] [URI|DIRECTORY]
  EOS
  opt :debug, 'Debugging text scrolls'
  opt :format, "Output format [#{FORMATS.keys.join("|")}]", :default => 'text'
  opt :commit, 'Start history from this commit', :default => 'HEAD'
  opt :max_count, 'Max number of results from specified commit', :default => 1
end

Trollop::die :format, "must be one of [#{FORMATS.keys.join("|")}]" unless FORMATS.keys.include?(opts[:format])

include BT::Cli

uri = ARGV.shift || Dir.pwd

Grit.debug = true if opts[:debug]

BT::Repository.mirror(uri) do |r|
  r.update

  pipelines = r.commits(:start => opts[:commit], :max_count => opts[:max_count]).map do |commit|
    stage_definition = YAML.load(`#{find_command :stages} --commit #{commit.sha} "#{r.path}"`)
    BT::Pipeline.new(commit, stage_definition)
  end
  
  $stdout.print(FORMATS[opts[:format]].call pipelines)
end

